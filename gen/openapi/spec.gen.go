// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SWS2/jNhDHvwrB9qjE3rQnAT0kfS6QAG6a7iUIipE0lhlLJJePuq6h715waFlSxDwW",
	"6Bbdi2BTM8MfZ/7D0YGXqtVKonSW5wduyw22QD+vVLX/o1G1kMenVtaFF9oojcYJJDMN1u6UqcJvJ1yD",
	"POerfi3jbq/DinVGyJp3GfcWjYQWx/a/92sz+y7jBj96YbDi+f3gnA37PmSnOGnkU1BVPGLpAsQvd3er",
	"D9CICpxQ8kdjlJmfrEIHogm/hMOWlr42uOY5/2oxZG1xTNniabxu4PohRjqBgDGwp8P1FimgBPcNuM2v",
	"Hs1+TgvjhF4OzkI6rJFwirHJVcLkSbaBB59Rfoftn2G7RauVtDjH+9hTv5TCIT6RWN+4WIg10M/lgHIb",
	"3ybPMMY9EaWI0Vqo8XnoUlX4HMD34V0qy62tx3m+sXVS1qf3TyASnK8qtVHlRKazpus3u1YlxZlJcY4d",
	"sVIdHBcGU4Jid2H1tf4NoHGro+VIXG+Q/wdo/GcqV8pnUrqUwKY8M+BgKuRajZP1E1h3uXrPM/4nGhtK",
	"kfPl+bvzZWBRGiVowXP+zfny/IJuObehsy3Co0bqh3BmStT7ijoBqlul3M8Y2sEcacjpYrmMeZEOJbmC",
	"1o2IGlg82rB7f+e/2ptPdEqnq9CWRmgXz/GbL0u0du0bNjLLuPVtC6H7iZUFWFpf0CVNdTyOlmm8a3Bi",
	"A5JtsfKQsbWXtRWMnNgeZM1gC5K1KGvwbqOM+BvZo9gCq0CyDcg9xL/91LjP87N3D+w7pof5NM3ldYhN",
	"j1WcHEG8aF0YLC9k8q+z3W53tlamPfOmQRmEWL09temx1U2bxxmP3f+wvhn/9uLiX6NIzcEEyWDCepux",
	"zKiCUWKtqnyjntfYDTaw9aQjsmReOr9lhWhA1iBZuF6gjZLqdahMC461YMmvQOM1MIuFhw3TsG8UVKzC",
	"6A4GWnRoWAxRBDuoQcRgwz6Fb8DN9Bj65Ya44vOTVPmJ9R9m738svPGU/pJVR5dbrFPUnlY7NIsDdItD",
	"0Y3u7/Qtd1RaFi40DCIEyYBpkPUWHCt6RUXdDLoS0MDmLTpaBRp6XF7FWXEKYnl+f+DhKqaBwzMev9Dp",
	"C3CqhGyU0pe+NrssGbB4U8Dkt+nDZ9TgdJB/8SKkKgfn7p8AAAD///ODWyzgDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
