// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package gen

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Read Root
	// (GET /)
	ReadRootGet(ctx echo.Context) error
	// Login
	// (POST /login)
	LoginLoginPost(ctx echo.Context) error
	// Read Modulo
	// (POST /modulo)
	ReadModuloModuloPost(ctx echo.Context) error
	// Read Power
	// (GET /power/{a}/{b})
	ReadPowerPowerABGet(ctx echo.Context, a int, b int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ReadRootGet converts echo context to params.
func (w *ServerInterfaceWrapper) ReadRootGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReadRootGet(ctx)
	return err
}

// LoginLoginPost converts echo context to params.
func (w *ServerInterfaceWrapper) LoginLoginPost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LoginLoginPost(ctx)
	return err
}

// ReadModuloModuloPost converts echo context to params.
func (w *ServerInterfaceWrapper) ReadModuloModuloPost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReadModuloModuloPost(ctx)
	return err
}

// ReadPowerPowerABGet converts echo context to params.
func (w *ServerInterfaceWrapper) ReadPowerPowerABGet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "a" -------------
	var a int

	err = runtime.BindStyledParameterWithLocation("simple", false, "a", runtime.ParamLocationPath, ctx.Param("a"), &a)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter a: %s", err))
	}

	// ------------- Path parameter "b" -------------
	var b int

	err = runtime.BindStyledParameterWithLocation("simple", false, "b", runtime.ParamLocationPath, ctx.Param("b"), &b)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter b: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReadPowerPowerABGet(ctx, a, b)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.ReadRootGet)
	router.POST(baseURL+"/login", wrapper.LoginLoginPost)
	router.POST(baseURL+"/modulo", wrapper.ReadModuloModuloPost)
	router.GET(baseURL+"/power/:a/:b", wrapper.ReadPowerPowerABGet)

}
